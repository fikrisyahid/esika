// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  nama       String
  email      String       @unique
  password   String
  Dosen      Dosen?
  Mahasiswa  Mahasiswa?
  Admin      Admin?
  Notifikasi Notifikasi[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Notifikasi {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  judul     String
  isi       String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dosen {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String      @unique
  Kelas     Kelas[]
  Challenge Challenge[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Mahasiswa {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String              @unique
  NIM               String              @unique
  jumlah_poin       Int                 @default(0)
  Transaksi_Poin    Transaksi_Poin[]
  Nilai             Nilai[]
  Jawaban_Tugas     Jawaban_Tugas[]
  Jawaban_Ujian     Jawaban_Ujian[]
  Jawaban_Challenge Jawaban_Challenge[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Transaksi_Poin {
  id                String    @id @default(uuid())
  Mahasiswa         Mahasiswa @relation(fields: [mahasiswaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId       String
  poin_mahasiswa    Int
  poin_reward       Int
  tanggal_transaksi DateTime
  Reward            Reward?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Reward {
  id               String         @id @default(uuid())
  transaksi_poin   Transaksi_Poin @relation(fields: [transaksi_poinId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaksi_poinId String         @unique
  deskripsi        String
  persyaratan      String
  point            Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Nilai {
  id          String    @id @default(uuid())
  mahasiswa   Mahasiswa @relation(fields: [mahasiswaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId String
  nilai       Int
  Kelas       Kelas?    @relation(fields: [kelasId], references: [id])
  kelasId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Kelas {
  id              String   @id @default(uuid())
  dosen           Dosen    @relation(fields: [dosenId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dosenId         String
  kode            String   @unique
  nama            String
  komposisi_tugas Int
  komposisi_uts   Int
  komposisi_uas   Int
  komposisi_quiz  Int
  Materi          Materi[]
  Tugas           Tugas[]
  Ujian           Ujian[]
  Nilai           Nilai[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Materi {
  id        String   @id @default(uuid())
  kelas     Kelas    @relation(fields: [kelasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  kelasId   String
  judul     String
  deskripsi String
  file      String
  tanggal   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tugas {
  id            String         @id @default(uuid())
  kelas         Kelas          @relation(fields: [kelasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  kelasId       String
  judul         String
  deskripsi     String
  file          String
  tanggal       DateTime       @default(now())
  deadline      DateTime?
  Jawaban_Tugas Jawaban_Tugas?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Jawaban_Tugas {
  id             String    @id @default(uuid())
  tugas          Tugas     @relation(fields: [tugasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tugasId        String    @unique
  mahasiswa      Mahasiswa @relation(fields: [mahasiswaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId    String
  tanggal_submit DateTime?
  file           String
  nilai          Int?
}

model Ujian {
  id            String         @id @default(uuid())
  kelas         Kelas          @relation(fields: [kelasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  kelasId       String
  judul         String
  deskripsi     String
  file          String
  tanggal       DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Jawaban_Ujian Jawaban_Ujian?
}

model Jawaban_Ujian {
  id             String    @id @default(uuid())
  ujian          Ujian     @relation(fields: [ujianId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ujianId        String    @unique
  mahasiswa      Mahasiswa @relation(fields: [mahasiswaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId    String
  tanggal_submit DateTime?
  file           String
  nilai          Int?
}

model Challenge {
  id            String   @id @default(uuid())
  dosen         Dosen    @relation(fields: [dosenId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dosenId       String
  judul         String
  deskripsi     String
  waktu_mulai   DateTime
  waktu_selesai DateTime
  pilihan_1     String
  pilihan_2     String
  pilihan_3     String
  pilihan_4     String
  poin          Int
  jawaban       String
  tanggal       DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Jawaban_Challenge {
  id          String    @id @default(uuid())
  mahasiswa   Mahasiswa @relation(fields: [mahasiswaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mahasiswaId String
  jawaban     String
  penilaian   Int?
  hadiah_poin Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
